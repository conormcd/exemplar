# vim:filetype=jproperties:ts=4
#
# Copyright (c) 2005, 2006
# Conor McDermottroe.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the author nor the names of any contributors to
#    the software may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Define options here like so:
#
# name.type = Type							[Mandatory]
# name.description = Description goes here	[Mandatory]
# name.value = Type of argument				[
#												Optional for Arguments, defaults to String, legal values are [String, File, Directory]
#												Mandatory for Enums if name.value.foo form is not used, value must be a fully qualified package.class.methodName
#											]
# name.value.foo = Description of foo		[Mandatory for Enums if name.value form is not used]
# name.default = default value				[Optional, defaults to empty/false]
# name.mandatory							[Optional, defaults to false]
# name.multivalue							[Optional, defaults to false]
# name.casesensitive						[Optional, defaults to true]
debug.type = Switch
debug.description = Turn on all internal assertion checking.
exclude.type = Enum
exclude.description = Prevent the generated parser from recognising the tokens in the comma-separated list provided. Note that not all language/API combinations respect this exclusion list.
exclude.value.CDSect = Exclude character data (CDATA) sections. CDATA sections begin with the string "<![CDATA[" and end with "]]>".
exclude.value.CharRef = Exclude character references. Character references look like &#32; (The space character) or &#x41; (The character 'A').
exclude.value.Comment = Exclude comments. XML comments begin with "<!--" and end with "-->".
exclude.value.doctypedecl = Exclude document type declarations. Document type declarations begin with "<!DOCTYPE" and end with ">".
exclude.value.PI = Exclude processing instructions. Processing instructions begin with "<?name" (where name may not be "XML" in any case) and end with "?>".
exclude.multivalue = true
help.type = Switch
help.description = Display a description of all the valid options accepted by the program.
include.type = Enum
include.description = Add features to the generated parser by passing a comma-separated list of features here.
include.value.entities = Include all the entities defined in the input and cause them to be expanded during the parse.
include.multivalue = true
input-type.type = Enum
input-type.description = Set the input type.
input-type.value = com.mcdermottroe.exemplar.input.InputUtils.availableInputLanguages
input-type.default = dtd
input-type.casesensitive = false
input.type = Argument
input.description = The file to read the specification of the XML vocabulary from. If the filename is "-" this causes the input to be read from standard input.
input.mandatory = true
output-api.type = Enum
output-api.description = Some output modules differ only from others by the API the generated parser provides. Use this argument to select the API you wish.
output-api.value = com.mcdermottroe.exemplar.output.OutputUtils.availableOutputAPIs
output-api.casesensitive = false
output-language.type = Enum
output-language.description = The language you wish the generated parser to be provided in.
output-language.value = com.mcdermottroe.exemplar.output.OutputUtils.availableOutputLanguages
output-language.mandatory = true
output-language.casesensitive = false
output.type = Argument
output.description = Set the directory to which output will be written.
version.type = Switch
version.description = Display the version of the program and then exit.
vocabulary.type = Argument
vocabulary.description = A name for the vocabulary of XML that the generated parser will parse.
vocabulary.default = XML
