# vim:filetype=jproperties:ts=4
#
# Copyright (c) 2007
# Conor McDermottroe.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the author nor the names of any contributors to
#    the software may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
ABSTRACT_ELEMENT_CLASS	=	\/* Generated by {0} on {1}. */\n\
							\package {2}.support;\n\
							\n\
							\import java.io.IOException;\n\
							\import java.io.Writer;\n\
							\import java.util.ArrayList;\n\
							\import java.util.Iterator;\n\
							\import java.util.List;\n\
							\import java.util.Map;\n\
							\import java.util.SortedMap;\n\
							\import java.util.TreeMap;\n\
							\n\
							\public abstract class {0}Element extends XMLComponent {\n\
							\	/** The attributes, if any. */\n\
							\	protected SortedMap attributes;\n\
							\n\
							\	/** The contained elements, if any. */\n\
							\	protected List contents;\n\
							\n\
							\	/** The name of the element. */\n\
							\	protected String name;\n\
							\n\
							\	/** Create a new {0}Element.\n\
							\n\
							\		@param	elementName	The name of the element.\n\
							\	*/\n\
							\	protected {0}Element(String elementName) {\n\
							\		name = elementName;\n\
							\		attributes = new TreeMap();\n\
							\	}\n\
							\n\
							\	/** {@inheritDoc} */\n\
							\	public void write(Writer w, int depth)\n\
							\	throws IOException\n\
							\	{\n\
							\		for (int i = 0; i < depth; i++) {\n\
							\			w.write("    ");\n\
							\		}\n\
							\		w.write("<");\n\
							\		w.write(name);\n\
							\		if (!attributes.isEmpty()) {\n\
							\			for (Iterator i = attributes.values().iterator(); i.hasNext(); ) {\n\
							\				Attribute att = (Attribute)i.next();\n\
							\				att.write(w, depth);\n\
							\			}\n\
							\		}\n\
							\		if (contents == null) {\n\
							\			w.write(" />");\n\
							\		} else {\n\
							\			w.write(">\\n");\n\
							\			for (Iterator i = contents.iterator(); i.hasNext(); ) {\n\
							\				XMLComponent x = (XMLComponent)i.next();\n\
							\				x.write(w, depth + 1);\n\
							\			}\n\
							\			w.write("</");\n\
							\			w.write(name);\n\
							\			w.write(">");\n\
							\		}\n\
							\		w.write("\\n");\n\
							\	}\n\
							\n\
							\	/** A class to wrap the notion of an XML attribute. */\n\
							\	protected class Attribute extends XMLComponent implements Comparable {\n\
							\		/** An attribute which is not FIXED, IMPLIED or REQUIRED. */\n\
							\		public static final int DEFAULT = 0;\n\
							\n\
							\		/** An attribute which is FIXED. */\n\
							\		public static final int FIXED = 1;\n\
							\n\
							\		/** An attribute which is IMPLIED. */\n\
							\		public static final int IMPLIED = 2;\n\
							\n\
							\		/** An attribute which is REQUIRED. */\n\
							\		public static final int REQUIRED = 3;\n\
							\n\
							\		/** The attribute's default value if any. */\n\
							\		private String defaultValue = null;\n\
							\n\
							\		/** The name of the attribute. */\n\
							\		private String name = null;\n\
							\n\
							\		/** The type of the attribute. */\n\
							\		private int type = -1;\n\
							\n\
							\		/** The attribute's current value, if any. */\n\
							\		private String value = null;\n\
							\n\
							\		/** Create a new Attribute.\n\
							\n\
							\			@param	attName   The name of the attribute.\n\
							\			@param	attType   The type of the attribute.\n\
							\			@param	defValue  The default value for the attribute, if appropriate.\n\
							\		*/\n\
							\		public Attribute(String attName, int attType, String defValue) {\n\
							\			name = attName;\n\
							\			type = attType;\n\
							\			if (attType == DEFAULT || attType == FIXED) {\n\
							\				if (defValue != null) {\n\
							\					defaultValue = defValue;\n\
							\					value = defValue;\n\
							\				} else {\n\
							\					throw new UnsupportedOperationException("The default value of an attribute may not be null");\n\
							\				}\n\
							\			} else {\n\
							\				if (defValue != null) {\n\
							\					throw new UnsupportedOperationException("Default values may not be provided for REQUIRED or IMPLIED attributes.");\n\
							\				}\n\
							\			}\n\
							\		}\n\
							\n\
							\		/** Implementation of {@link Comparable#compareTo(Object)}. */\n\
							\		public int compareTo(Object o) {\n\
							\			if (o instanceof Attribute) {\n\
							\				return name.compareTo(((Attribute)o).name);\n\
							\			} else {\n\
							\				throw new ClassCastException("Attributes may only be compared with other Attributes");\n\
							\			}\n\
							\		}\n\
							\n\
							\		public String getDefaultValue() {\n\
							\			if (defaultValue != null) {\n\
							\				return defaultValue;\n\
							\			} else {\n\
							\				throw new UnsupportedOperationException(name + " attributes do not have a default.");\n\
							\			}\n\
							\		}\n\
							\n\
							\		public String getName() {\n\
							\			return name;\n\
							\		}\n\
							\n\
							\		public int getType() {\n\
							\			return type;\n\
							\		}\n\
							\n\
							\		public String getValue() {\n\
							\			return value;\n\
							\		}\n\
							\n\
							\		public void setValue(String val) {\n\
							\			if (type == FIXED) {\n\
							\				throw new UnsupportedOperationException("Cannot set value, attribute " + name + " is a FIXED attribute");\n\
							\			}\n\
							\			value = val;\n\
							\		}\n\
							\n\
							\		/** {@inheritDoc} */\n\
							\		public void write(Writer w, int depth)\n\
							\		throws IOException\n\
							\		{\n\
							\			if (value == null) {\n\
							\				return;\n\
							\			}\n\
							\			if (value.equals(defaultValue)) {\n\
							\				return;\n\
							\			}\n\
							\			w.write(" ");\n\
							\			w.write(name);\n\
							\			w.write("=\\"");\n\
							\			w.write(value);\n\
							\			w.write("\\"");\n\
							\		}\n\
							\	}\n\
							\}\n
ELEMENT_CLASS	=			\/* Generated by {0} on {1}. */\n\
							\package {2}.element;\n\
							\n\
							\import {2}.support.{0}Element;\n\
							\n\
							\/** A class for representing {3} elements. */\n\
							\public class {4} extends {0}Element {\n\
							\	/** Create a {3} element object. */\n\
							\	public {4}() {\n\
							\		super("{3}");\n\
							\{5}\n\
							\	}\n\
							\{6}\n\
							\}\n
ROOT_PARSER_CLASS	=		\/* Generated by {0} on {1}. */\n\
							\package {2};\n\
							\n\
							\import java.io.BufferedReader;\n\
							\import java.io.InputStream;\n\
							\import java.io.InputStreamReader;\n\
							\n\
							\import {2}.support.XMLComponent;\n\
							\n\
							\public class {3} {\n\
							\	/** Read the document from a {@link BufferedReader}. */\n\
							\	public XMLComponent read(BufferedReader reader) {\n\
							\		return null;\n\
							\	}\n\
							\n\
							\	/** Read the document from a {@link InputStreeam}. */\n\
							\	public XMLComponent read(InputStream input) {\n\
							\		return read(new BufferedReader(new InputStreamReader(input)));\n\
							\	}\n\
							\}\n
XML_COMPONENT_CLASS	=		\/* Generated by {0} on {1}. */\n\
							\package {2}.support;\n\
							\n\
							\import java.io.IOException;\n\
							\import java.io.Writer;\n\
							\n\
							\/** An {@link XMLDocument} is made up of {@link XMLComponent}s. */\n\
							\public abstract class XMLComponent {\n\
							\	/** Shorthand for writing at depth 0.\n\
							\n\
							\		@param	w			The {@link Writer} to write to.\n\
							\		@throws	IOException	if the {@link Writer} throws one.\n\
							\	*/\n\
							\	public void write(Writer w) throws IOException {\n\
							\		write(w, 0);\n\
							\	}\n\
							\n\
							\	/** Write out the XML component.\n\
							\n\
							\		@param	w			The {@link Writer} to write to.\n\
							\		@param	depth		The depth of indenting to go to.\n\
							\		@throws	IOException	if the {@link Writer} throws one.\n\
							\	*/\n\
							\	public abstract void write(Writer w, int depth) throws IOException;\n\
							\}\n
XML_CONTENT_CLASS	=		\/* Generated by {0} on {1}. */\n\
							\package {2}.support;\n\
							\n\
							\import java.io.IOException;\n\
							\import java.io.Writer;\n\
							\/** Represent text content in an {@link XMLDocument}. */\n\
							\public class XMLContent extends XMLComponent {\n\
							\	/** The text content itself. */\n\
							\	private String content;\n\
							\n\
							\	/** Create an {@link XMLContent} element. */\n\
							\	public XMLContent(String text) {\n\
							\		content = text;\n\
							\	}\n\
							\n\
							\	/** {@inheritDoc} */\n\
							\	public void write(Writer w, int depth) throws IOException {\n\
							\		for (int i = 0; i < depth; i++) {\n\
							\			w.write("    ");\n\
							\		}\n\
							\		w.write(content);\n\
							\	}\n\
							\}\n
XML_DOCUMENT_CLASS	=		\/* Generated by {0} on {1}. */\n\
							\package {2}.support;\n\
							\n\
							\import java.io.IOException;\n\
							\import java.io.Writer;\n\
							\n\
							\/** A representation of an XML document. */\n\
							\public class XMLDocument extends XMLComponent {\n\
							\	/** The root element of the XML document. */\n\
							\	private {0}Element rootElement;\n\
							\n\
							\	/** The xml declaration at the start, if any. */\n\
							\	private String xmlDeclaration;\n\
							\n\
							\	/** {@inheritDoc} */\n\
							\	public void write(Writer w, int depth) throws IOException;\n\
							\}\n
